{"version":3,"sources":["component/Nav.js","hooks/context.js","component/Poker.js","component/PokerWrapper.js","component/WrapperGroup.js","page/Index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","href","IndexContext","createContext","Poker","_ref","pokerIndex","cardIndex","draggable","pointable","style","pokerRef","useContext","concat","ref","onDragStart","e","parent","target","parentElement","current","originWrapperIndex","getAttribute","originWrapperGroup","PokerWrapper","children","wrapperIndex","data-index","onDragOver","preventDefault","WrapperGroup","groupName","_useContext","cellGroup","tempCell","mainCell","gameCell","isArray","item","Array","data-group","map","cell","index","Fragment","key","component_PokerWrapper","length","cellIndex","component_Poker","top","Index","_useState","useState","Object","seal","_useState2","slicedToArray","setTempCell","_useState3","_useState4","setMainCell","_useState5","_useState6","setGameCell","useRef","defaultContext","arrayIndexReplacer","tempArr","value","toConsumableArray","setCellGroupByName","setterFunc","onDrop","console","log","newWrapperIndex","newWrapperGroup","newGroup","prev","elementToReplace","splice","WrapperIndexArray","push","Provider","component_Nav","component_WrapperGroup","App","react_router_dom","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b6455a7.chunk.js","sourcesContent":["import React from 'react'\n\nlet Nav = ()=>{\n\n    return (\n        <div>\n            \n            <nav className=\"navbar navbar-dark bg-dark px-5\">\n                <a className=\"navbar-brand\" href=\"/\">FREECELL</a>\n            </nav>\n\n        </div>\n    )\n}\n\nexport default Nav","import  {createContext} from 'react'  \n\nexport let IndexContext = createContext({})","import React,{useContext} from 'react'\nimport {IndexContext} from '../hooks/context'\nlet Poker = ({cardIndex:pokerIndex,draggable,pointable,style})=>{\n    let {pokerRef} = useContext(IndexContext)\n    function dragStart(e){\n        let parent = e.target.parentElement\n       pokerRef.current = {\n            pokerIndex, \n            originWrapperIndex: parent.getAttribute('data-index'),\n            originWrapperGroup: parent.parentElement.getAttribute('data-group')\n       }\n    } \n    return(\n            <div className={`card card-poker ${pointable?'cursor-pointer':null}` }\n                \n                style={style}\n                draggable={draggable}\n                ref={pokerRef}\n                onDragStart={dragStart}>\n\n            \b<div className=\"patern patern-left-top\">\n                <span>\n                    {pokerIndex?pokerIndex:null}\n                </span>\n            </div>\n            \b<div className=\"patern patern-right-bottom\">\n                <span>\n                    {pokerIndex?pokerIndex:null}\n                </span>\n            </div>\n  </div>\n    )\n} \n\nexport default Poker","import React from 'react'\n\nlet PokerWrapper = ({children,wrapperIndex})=>{\n\n    \n\n    return(\n        <div className=\"card card-box\"\n        data-index={wrapperIndex}\n        onDragOver={(e)=>{e.preventDefault()}}> \n            {children}\n        </div>\n    )\n} \n\nexport default PokerWrapper","\nimport React, { useContext } from 'react'\nimport { IndexContext } from '../hooks/context'\nimport Poker from '../component/Poker'\nimport PokerWrapper from '../component/PokerWrapper'\n\nlet WrapperGroup = ({ groupName }) => {\n    let { tempCell,\n        mainCell,\n        gameCell } = useContext(IndexContext)\n\n    let cellGroup = {\n        tempCell,\n        mainCell,\n        gameCell\n    }\n\n    function getGroup() {\n        return cellGroup[groupName]\n    }\n\n    function isArray(item) {\n        return Array.isArray(item)\n    }\n\n    return (\n        <div className=\"wrapper-group\" data-group={groupName}>\n            {getGroup().map((cell, index) => {\n                return (\n                    <React.Fragment key={index}>\n                        <PokerWrapper\n                            wrapperIndex={index} >\n\n                            {\n                                (() => {\n                                    if ((isArray(cell) && cell.length > 0)) {\n                                        return (\n                                            cell.map((cellIndex, key) => {\n                                                return (<Poker\n                                                    \n                                                    style={{top:(key*40)+'px'}}\n                                                    pointable={key===cell.length-1} \n                                                    draggable={key===cell.length-1}\n                                                    cardIndex={cellIndex}\n                                                    key={key} />)\n                                            })\n                                        )\n                                    } else if ((!isArray(cell) && cell !== null)) {\n                                        return (<Poker \n                                                    cardIndex={cell} \n                                                    draggable={true}\n                                                    pointable={true}/>)\n                                    } else {\n                                        return null\n                                    }\n                                })()\n\n                            }\n                        </PokerWrapper>\n                    </React.Fragment>\n                )\n            })}\n        </div>)\n\n}\n\nexport default WrapperGroup","import React,{useState,useRef} from 'react'\nimport Nav from '../component/Nav'\nimport WrapperGroup from '../component/WrapperGroup'\nimport {IndexContext} from '../hooks/context'\nimport { isArray } from 'util';\nlet Index = ()=>{\n    let [tempCell,setTempCell] = useState(Object.seal([3,null,null,null])) \n    let [mainCell,setMainCell] = useState(Object.seal([null,12,null,null]))\n    let [gameCell,setGameCell] = useState(Object.seal([[1,2,3,12],[],[],[],[],[],[],[]]))\n    let pokerRef = useRef()\n    \n    let defaultContext={\n        gameCell,\n        tempCell,\n        mainCell,\n        setGameCell,\n        setMainCell,\n        setTempCell,\n        pokerRef\n    } \n    \n    function arrayIndexReplacer(tempArr,index,value){\n        tempArr[index]= value\n        return [...tempArr]\n    }\n    function getCellGroupByName(name){\n        let cellGroups = {\n            gameCell,\n            tempCell,\n            mainCell,\n        }\n        return cellGroups[name]\n    }\n    function setCellGroupByName(groupName,setterFunc){\n        if (groupName === 'tempCell') {\n            setTempCell(setterFunc)\n        } else if (groupName === 'mainCell') {\n            setMainCell(setterFunc)\n        } else if (groupName === 'gameCell') {\n            setGameCell(setterFunc)\n        }\n    }\n\n    const onDrop = (e)=>{\n        console.log('e: ', e.target);\n        \n        \n       \n        let newWrapperIndex =e.target.getAttribute('data-index') ||e.target.parentElement.getAttribute('data-index')\n        let newWrapperGroup = e.target.parentElement.getAttribute('data-group') ||e.target.parentElement.parentElement.getAttribute('data-group')\n        console.log('newWrapperGroup: ', newWrapperGroup);\n        let {originWrapperIndex} = pokerRef.current\n        let {originWrapperGroup} = pokerRef.current\n        let {pokerIndex} = pokerRef.current\n        let newGroup = getCellGroupByName(newWrapperGroup) \n        // let originGroup = getCellGroupByName(originWrapperGroup) \n        \n      if(newWrapperGroup && newWrapperGroup!=='gameCell'  ){\n          if(newGroup[newWrapperIndex]) return  \n        setCellGroupByName(originWrapperGroup,prev=>{\n            let elementToReplace\n            if(isArray(prev[originWrapperIndex])){\n                let {length} = prev[originWrapperIndex]\n                elementToReplace = prev[originWrapperIndex].splice(0,length-1)\n            }else{\n                elementToReplace = null \n            } \n            return arrayIndexReplacer(prev,originWrapperIndex,elementToReplace)     \n        }) \n\n        setCellGroupByName(newWrapperGroup,prev=>{\n            return arrayIndexReplacer(prev,newWrapperIndex,pokerIndex)   \n        }) \n      }else if(newWrapperGroup && newWrapperGroup==='gameCell'){\n        setCellGroupByName(originWrapperGroup,prev=>{\n            let elementToReplace\n            if(isArray(prev[originWrapperIndex])){\n                let {length} = prev[originWrapperIndex]\n                elementToReplace = prev[originWrapperIndex].splice(0,length-1)\n            }else{\n                elementToReplace = null \n            }\n            return arrayIndexReplacer(prev,originWrapperIndex,elementToReplace)\n        }) \n        \n        setCellGroupByName(newWrapperGroup,prev=>{\n            \n            let WrapperIndexArray = prev[newWrapperIndex]  \n            console.log('prev: ', prev);\n            console.log('newWrapperIndex: ', newWrapperIndex);\n            console.log('WrapperIndexArray: ', WrapperIndexArray);\n            \n            WrapperIndexArray.push(pokerIndex) \n            console.log('WrapperIndexArray: ', WrapperIndexArray);\n            prev[newWrapperIndex] = WrapperIndexArray\n            \n        \n            return [...prev]\n        }) \n      } \n        \n    }\n    return (\n        <IndexContext.Provider value={defaultContext}>\n            <div className=\"container-fuild\">\n                <Nav/>\n            </div>\n            <div className=\"container-fluid  \"> \n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1>FREECELL</h1>\n                    </div>\n                </div>\n                <div className=\"row\"> \n                    <div className=\"offset-1 col-5 text-center\"  onDrop={onDrop}>\n                       <WrapperGroup groupName=\"tempCell\"/>\n                    </div>\n                    <div className=\"col-6\" onDrop={onDrop}>\n                        <WrapperGroup groupName=\"mainCell\"/>\n                    </div>\n                </div>\n                <div className=\"row my-4\"> \n                    <div className=\"offset-1 col-10 text-center\" onDrop={onDrop}> \n                        <WrapperGroup groupName=\"gameCell\" />\n                    </div>\n                </div>\n            </div>\n        </IndexContext.Provider>\n    )\n}\n\nexport default Index","import React from 'react';\nimport { BrowserRouter , Route } from \"react-router-dom\";\nimport Index from '../src/page/Index'\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n     \n    <Route path=\"/\" component={Index}/>\n    \n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}